from sklearn.metrics import confusion_matrix, classification_report
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
from PIL import Image
import tensorflow as tf
import numpy as np
import glob
import cv2
import os

# Train Images and label
X_train = []
path_Train = glob.glob("Train_Permission_Images40x40/*.png")
for myFile_Train in path_Train:
    image_Train = cv2.imread(myFile_Train)
    X_train.append(image_Train)

y_train = []
y_train = np.loadtxt("Label_TrainDataset80.txt", np.int)

X_train = np.array(X_train, dtype=np.uint8)
y_train = np.array(y_train, dtype=np.uint8)

print("Shape of Train images=(total number, width, height, three channels -> RGB)  :", X_train.shape)
print("Length of Train Label Data-set :", len(y_train))
print("----------------------------------------------------------------------------------------------------")

# Test Images and label
X_test = []
pathTest = glob.glob("Test_Permission_Images40x40/*.png")
for myFileTest in pathTest:
    imageTest = cv2.imread(myFileTest)
    X_test.append(imageTest)

y_test = []
y_test = np.loadtxt("Label_TestDataset20.txt", np.int)

X_test = np.array(X_test, dtype=np.uint8)
y_test = np.array(y_test, dtype=np.uint8)

print("Shape of Test images=(total number, width, height, three channels -> RGB)  :", X_test.shape)
print("Length of Test Label Data-set :", len(y_test))
print("----------------------------------------------------------------------------------------------------")


# # Normal_Algorithm (Bydeny accuracy olyla w dah tabe3y)
# ann = models.Sequential([
#     layers.Flatten(input_shape=(40, 40, 3)),
#     layers.Dense(3000, activation='relu'),
#     layers.Dense(1000, activation='relu'),
#     layers.Dense(2, activation='softmax')
# ])
#
# ann.compile(optimizer='SGD',
#             loss='sparse_categorical_crossentropy',
#             metrics=['accuracy'])
#
# ann.fit(X_train, y_train, epochs=5)
#
# ann.evaluate(X_test, y_test)

# y_pred = ann.predict(X_test)
# y_pred_classes = [np.argmax(element) for element in y_pred]
# print("Classification Report: \n", classification_report(y_test, y_pred_classes))

# Train CNN Model Algorithm
cnn = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(40, 40, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),


    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    # layers.Dense(128, activation='relu'),
    # layers.Dense(128, activation='relu'),
    layers.Dense(2, activation='softmax')

])

cnn.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=200)

print("----------------------------------------------------Test----------------------------------------------------")
# Test CNN Model Algorithm
cnn.evaluate(X_test, y_test)

cnn.save("CNN.h5")
