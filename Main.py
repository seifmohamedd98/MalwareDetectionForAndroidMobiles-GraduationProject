import time
import pandas as pd
import pylab
import numpy as np
import matplotlib.pyplot as plt
from sklearn import cluster, datasets
from sklearn.neighbors import kneighbors_graph
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB, BernoulliNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split

from sklearn.neighbors import KNeighborsClassifier


df=pd.read_csv("android_permissions.csv",sep=";");

df = df.astype("int64")
df.type.value_counts()

print(df.shape)

print("Most common benign permissions")
print(pd.Series.sort_values(df[df.type==0].sum(axis=0), ascending=False)[:10])


print("Most common malicious permissions")
print(pd.Series.sort_values(df[df.type==1].sum(axis=0), ascending=False)[1:11])

#df.to_csv(r"Dataset.csv",header=True)

#Plotting most common used permissions in both benign and malicious apps



ig, axs =  plt.subplots(ncols=2, sharex=False,figsize=(25,25))
pd.Series.sort_values(df[df.type==0].sum(axis=0), ascending=False)[:10].plot.bar(ax=axs[0])
pd.Series.sort_values(df[df.type==1].sum(axis=0), ascending=False)[1:11].plot.bar(ax=axs[1], color="red")

axs[0].set_title("Benign")
axs[1].set_title("Malicious")

axs[0].set(xlabel="Most common permissions",ylabel="Number of occurences")
axs[1].set(xlabel="Most common permissions",ylabel="Number of occurences")

fig = plt.gcf()
fig.set_size_inches(15.5, 8)


plt.gcf().subplots_adjust(bottom=0.5)

print(df.shape)

pylab.show()

#Splitting dataset into train and test for both algorithms
X_train, X_test, y_train, y_test = train_test_split(df.iloc[:, 1:330], df['type'], test_size=0.20, random_state=42)


# Naive Bayes algorithm
gnb = GaussianNB()
gnb.fit(X_train, y_train)

# prediction
pred = gnb.predict(X_test)

# accuracy
accuracy = accuracy_score(pred, y_test)
print("naive_bayes")
print(accuracy)
print(classification_report(pred, y_test, labels=None))


#kneighbors algorithm
for i in range(3, 15, 3):
    neigh = KNeighborsClassifier(n_neighbors=i)
    neigh.fit(X_train, y_train)

    #prediction
    pred = neigh.predict(X_test)

    # accuracy
    accuracy = accuracy_score(pred, y_test)
    print("kneighbors {}".format(i))
    print(accuracy)
    print(classification_report(pred, y_test, labels=None))
    print("")